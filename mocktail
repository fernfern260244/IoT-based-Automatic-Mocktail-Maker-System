/*
  Rui Santos
  Complete project details at our blog.
    - ESP32: https://RandomNerdTutorials.com/esp32-firebase-realtime-database/
    - ESP8266: https://RandomNerdTutorials.com/esp8266-nodemcu-firebase-realtime-database/
  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files.
  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
  Based in the RTDB Basic Example by Firebase-ESP-Client library by mobizt
  https://github.com/mobizt/Firebase-ESP-Client/blob/main/examples/RTDB/Basic/Basic.ino
*/

#include <Arduino.h>
#if defined(ESP32)
#include <WiFi.h>
#elif defined(ESP8266)
#include <ESP8266WiFi.h>
#endif
#include <Firebase_ESP_Client.h>
#include <ArduinoJson.h>
#include <ESP32Servo.h>

// Provide the token generation process info.
#include "addons/TokenHelper.h"
// Provide the RTDB payload printing info and other helper functions.
#include "addons/RTDBHelper.h"

// Insert your network credentials
#define WIFI_SSID "Mi-WiFi"
#define WIFI_PASSWORD "a1b2c3d4e5"

// Insert Firebase project API Key
#define API_KEY "AIzaSyDL5neQrF-c-xTYjqkjFA2wmkg0AeS9SvU"

// Insert RTDB URLefine the RTDB URL */
#define DATABASE_URL "https://doublem-91fd8-default-rtdb.firebaseio.com/"

// Insert Authorized Email and Corresponding Password
#define USER_EMAIL "rattana3627@gmail.com"
#define USER_PASSWORD "Thanyarat104"

// Define Firebase Data object
FirebaseData fbdo1;


FirebaseAuth auth;
FirebaseConfig config;

const int trig=19;
const int echo=21;
const int left = 15;
const int right = 18;

// กำหนดเวลาที่ต้องการให้มอเตอร์ทำงาน
int time_right = 100; // 1 นาที = 5000 มิลลิวินาที
int time_left = 100; // 1 นาที = 5000 มิลลิวินาที

int number_of_pin[] = {12, 13, 14, 25, 26, 27, 32, 33, 2, 4};

bool Status;

unsigned long sendDataPrevMillis = 0;
int count = 0;
bool signupOK = false;
String StringValue;
int motor_state = 0;
int delayTime = 0;
String inputFrom = "";

long data;
int cm;
Servo servo_bin;

// ฟังก์ชันสำหรับเปิดรีเลย์
void turn_on_relay(int relay_pin) {
  digitalWrite(relay_pin, HIGH);
}

// ฟังก์ชันสำหรับปิดรีเลย์
void turn_off_relay(int relay_pin) {
  digitalWrite(relay_pin, LOW);
}

// ฟังก์ชันสำหรับเลื่อนมอเตอร์ไปขวา
void move_right() {
  // เปิดรีเลย์สำหรับมอเตอร์ไปขวา
  turn_on_relay(right);
  // รอให้มอเตอร์ทำงานครบเวลาที่กำหนด
  delay(time_right);
  // ปิดรีเลย์สำหรับมอเตอร์ไปขวา
  turn_off_relay(right);
}

// ฟังก์ชันสำหรับเลื่อนมอเตอร์ไปซ้าย
void move_left() {
  // เปิดรีเลย์สำหรับมอเตอร์ไปซ้าย
  turn_on_relay(left);
  // รอให้มอเตอร์ทำงานครบเวลาที่กำหนด
  delay(time_left);
  // ปิดรีเลย์สำหรับมอเตอร์ไปซ้าย
  turn_off_relay(left);
}


void setup() {
  Serial.begin(9600);
  pinMode(left, OUTPUT);
  pinMode(right, OUTPUT);
  pinMode(trig,OUTPUT);
  pinMode(echo,INPUT);
  servo_bin.attach(5);

  for(int i = 0; i < 10; i++){
    pinMode(number_of_pin[i], OUTPUT);
  }

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  /* Assign the api key (required) */
  config.api_key = API_KEY;

  /* Assign the RTDB URL (required) */
  config.database_url = DATABASE_URL;

  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  /* Sign up */
  if (Firebase.signUp(&config, &auth, "", "")) {
    Serial.println("ok");
    signupOK = true;
  } else {
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }

  /* Assign the callback function for the long running token generation task */
  config.token_status_callback = tokenStatusCallback;  // see addons/TokenHelper.h

  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
}

void loop() {
  Serial.println("off moter");
  for(int i = 0; i < 10; i++){
    digitalWrite(number_of_pin[i], 1);
  }


  if (Firebase.ready() && signupOK && (millis() - sendDataPrevMillis > 1000 || sendDataPrevMillis == 0)) {
    sendDataPrevMillis = millis();
    if (Firebase.RTDB.getFloat(&fbdo1, "/button/pump"  )){
      if (fbdo1.dataType() == "string") {
        StringValue = fbdo1.stringData();
        Serial.print("Received String: ");
        Serial.println(StringValue);

        if (StringValue != inputFrom)
        {
          Serial.print("relay on ");
          
          // Split the string into substrings using strtok()
          char delimiter = ',';  // Delimiter character
          
          // Convert the String to a C-style null-terminated character array
          char str[StringValue.length() + 1];
          StringValue.toCharArray(str, sizeof(str));
          
          // Split the string into substrings using strtok()
          char* token = strtok(str, &delimiter);

          
          Serial.println("slideing");
          while(true)
          {
            digitalWrite(trig,LOW);
            delayMicroseconds(2);
            digitalWrite(trig,HIGH);
            delayMicroseconds(10);
            digitalWrite(trig,LOW);
            data = pulseIn(echo,HIGH);
            cm = data*0.035/2;
            Serial.println(cm);

            if(cm <= 11)
            {
              servo_bin.write(70); 
              delay(1000);
              servo_bin.write(0);
              delay(1000);
              
              while(true)
              {
                digitalWrite(trig,LOW);
                delayMicroseconds(2);
                digitalWrite(trig,HIGH);
                delayMicroseconds(10);
                digitalWrite(trig,LOW);
                data = pulseIn(echo,HIGH);
                cm = data*0.035/2;
                Serial.println(cm);
                if (cm >= 34)
                {
                  delay(1000);
                  break;
                }
                move_right();
              }
              break;
            }
            else
            {
              servo_bin.write(0);
              move_left();
            }
          }


          while (token != NULL) 
          {
            Serial.print("delimiter: ");
            Serial.println(&delimiter);
            Serial.print("motor state: ");
            Serial.print(motor_state);
            Serial.print("\t");
            Serial.print("token: ");
            Serial.print(token);
            Serial.print("\t");
            Serial.print("delayTime: ");
                   

        
            // Get the next substring
            token = strtok(NULL, &delimiter);
        
            digitalWrite(number_of_pin[motor_state],0);

            String delayString = token; // String representation of delay time
            Serial.println(delayTime = delayString.toInt());
    
            delay(delayTime);

        

            digitalWrite(number_of_pin[motor_state],1);
            motor_state++;
        }
          Serial.println("out loop");
          motor_state = 0;
        }else 
        {
          Serial.println("Done");
        }
        delay(5000);
        inputFrom = StringValue;
      }
    }
  }
}
